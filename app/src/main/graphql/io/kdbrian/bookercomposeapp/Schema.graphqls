"""
booking status
"""
enum BOOKING_STATUS {
  CANCELLED

  COMPLETED

  PENDING
}

"""
definitions for booking
"""
type Booking {
  id: ID!

  userID: String

  paymentStatus: PAYMENT_STATUS

  bookingStatus: BOOKING_STATUS

  createdAt: String

  updatedAt: String
}

input BookingDto {
  id: ID

  userId: String

  vehicleId: String!

  paymentStatus: PAYMENT_STATUS

  bookingStatus: BOOKING_STATUS
}

"""
 definitions for company
"""
type Company {
  id: ID!

  name: String

  location: String

  dateJoined: String
}

input CompanyDto {
  name: String

  location: String
}

type Mutation {
  """
  Companies
  create a company passing the relevant data
  """
  addCompany(companyDTO: CompanyDto!): Company

  addCompanies(companyDTO: [CompanyDto!]): [Company]

  """
  delete
  """
  deleteAllCompanies: Boolean

  deleteById(companyId: ID!): Boolean

  """
  2. schedules
  create
  """
  addSchedule(dto: ScheduleDto): Schedule

  addSchedules(scheduleDtos: [ScheduleDto!]): [Schedule]

  """
  delete
  """
  deleteAllSchedules: Boolean

  deleteScheduleById(id: ID!): Boolean

  """
  3. routes
  create
  """
  addRoute(dto: RouteDto): Route

  addRoutes(dto: [RouteDto!]): [Route!]

  """
  delete
  """
  deleteAllRoutes: Boolean

  deleteRouteById(id: ID!): Boolean

  """
  4. vehicles
  create
  """
  addVehicle(vehicleDto: VehicleDto): Vehicle

  addVehicles(vehicleDtos: [VehicleDto!]): [Vehicle!]

  """
  change
  """
  bookVehicle(bookingDto: BookingDto): Booking

  """
  delete
  """
  deleteVehicle(vehicleID: ID!): Boolean

  deleteVehicles: Boolean

  """
  5: Booking
  """
  addBooking(bookingDto: [BookingDto!]): Booking

  addBookings(dto: [BookingDto!]): [Booking]

  updateBooking(id: ID!, bookingDto: BookingDto!): Booking

  cancelBooking(bookingId: ID!): Booking

  deleteBooking(id: ID!): Boolean

  deleteBookings: Boolean

  """
  users
  """
  addUser(dto: UserDto): User

  addUsers(dto: [UserDto!]): [User]

  updateUser(dto: UserDto): User

  deleteUser(userId: String): Boolean

  deleteUsers: String

  deactivateUser(userId: String): Boolean
}

"""
 payment status
"""
enum PAYMENT_STATUS {
  COMPLETED

  PENDING

  PROCESSING

  ON_SITE
}

type Query {
  """
  1. companies
  """
  getCompanies: [Company]

  getCompanyById(companyID: ID!): Company

  getCompanyByLocation(location: String!): Company

  getCompaniesByLocation(location: String!): [Company]

  getCompanyByName(name: String!): Company

  getCompaniesByName(name: String!): [Company]

  """
  2. schedules
  """
  getSchedules: [Schedule!]

  getScheduleById(id: ID!): Schedule!

  getCompanySchedules(companyId: ID!): [Schedule!]

  """
  3. routes
  """
  getRoutes: [Route]

  getRouteById(id: ID!): Route!

  getRouteByScheduleId(scheduleId: ID!): [Route!]

  getRouteByCompanyId(companyId: ID!): [Route!]

  getRouteByFrom(from: String!): [Route]

  getRouteByTo(to: String!): [Route]

  getRouteByFromAndTo(from: String!, to: String!): [Route]

  """
  4. vehicles
  """
  getVehicles: [Vehicle]

  getVehicleByPrice(price: Float!): [Vehicle]

  getVehicleBySeatCount(seatCount: Int!): [Vehicle]

  getVehicleBySeatRange(seatRange: [Int!]): [Vehicle]

  getVehicleByIdentifier(identifier: String!): Vehicle

  getVehicleByRoute(routeID: ID!): [Vehicle]

  getVehicleByRouteFrom(from: String!): [Vehicle]

  getVehicleByRouteTo(to: String!): [Vehicle]

  getVehicleByRouteFromAndTo(from: String!, to: String!): [Vehicle]

  """
  5. Booking
  """
  getBookings: [Booking]

  getBookingWithId(bookingId: ID!): Booking

  getBookingsByPaymentStatus(paymentStatus: PAYMENT_STATUS): [Booking]

  getBookingsByUserId(userId: ID!): [Booking]

  getBookingsByBookingStatus(bookingStatus: BOOKING_STATUS!): [Booking]

  getBookingsByUserIdAndBookingStatus(userID: ID!, bookingStatus: BOOKING_STATUS!): [Booking]

  getBookingsByUserIdAndPaymentStatus(userID: ID!, paymentStatus: PAYMENT_STATUS!): [Booking]

  getBookingsByVehicles(vehicleID: ID!): [Booking]

  """
  6. User
  """
  getUsers: [User]

  getUserWithId(userId: ID!): User

  getUserWithEmail(email: String!): User
}

"""
route definitions
"""
type Route {
  id: ID!

  from: String!

  to: String!

  schedule: Schedule!

  createdAt: String!
}

input RouteDto {
  id: String

  from: String!

  to: String!

  scheduleId: String!
}

"""
schedule definitions
"""
type Schedule {
  id: ID

  company: Company!

  startTime: Float

  endTime: Float
}

input ScheduleDto {
  id: String

  companyID: String!

  startTime: String

  endTime: String
}

"""
user definitions
"""
type User {
  uid: ID!

  name: String

  email: String

  phone: String

  dateJoined: String

  lastUpdated: String

  isActive: Boolean
}

input UserDto {
  uid: ID

  name: String

  email: String

  phone: String

  isActive: Boolean
}

"""
vehicle definitions
"""
type Vehicle {
  id: ID!

  identifier: String

  route: Route

  price: Float

  seatCount: Float

  seatOccupied: Float

  leavingTime: Float

  estimatedTimeOfTravel: Float

  features: [String]
}

input VehicleDto {
  routeId: String!

  identifier: String!

  price: Float!

  seatCount: Float!

  seatOccupied: Float!

  leavingTime: Float

  estimatedTimeOfTravel: Float

  features: [String]
}

type __Directive {
  """
  The __Directive type represents a Directive that a server supports.
  """
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
An enum describing valid locations where a directive can be placed
"""
enum __DirectiveLocation {
  """
  Indicates the directive is valid on queries.
  """
  QUERY

  """
  Indicates the directive is valid on mutations.
  """
  MUTATION

  """
  Indicates the directive is valid on subscriptions.
  """
  SUBSCRIPTION

  """
  Indicates the directive is valid on fields.
  """
  FIELD

  """
  Indicates the directive is valid on fragment definitions.
  """
  FRAGMENT_DEFINITION

  """
  Indicates the directive is valid on fragment spreads.
  """
  FRAGMENT_SPREAD

  """
  Indicates the directive is valid on inline fragments.
  """
  INLINE_FRAGMENT

  """
  Indicates the directive is valid on variable definitions.
  """
  VARIABLE_DEFINITION

  """
  Indicates the directive is valid on a schema SDL definition.
  """
  SCHEMA

  """
  Indicates the directive is valid on a scalar SDL definition.
  """
  SCALAR

  """
  Indicates the directive is valid on an object SDL definition.
  """
  OBJECT

  """
  Indicates the directive is valid on a field SDL definition.
  """
  FIELD_DEFINITION

  """
  Indicates the directive is valid on a field argument SDL definition.
  """
  ARGUMENT_DEFINITION

  """
  Indicates the directive is valid on an interface SDL definition.
  """
  INTERFACE

  """
  Indicates the directive is valid on an union SDL definition.
  """
  UNION

  """
  Indicates the directive is valid on an enum SDL definition.
  """
  ENUM

  """
  Indicates the directive is valid on an enum value SDL definition.
  """
  ENUM_VALUE

  """
  Indicates the directive is valid on an input object SDL definition.
  """
  INPUT_OBJECT

  """
  Indicates the directive is valid on an input object field SDL definition.
  """
  INPUT_FIELD_DEFINITION
}

type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String

  isDeprecated: Boolean

  deprecationReason: String
}

"""
A GraphQL Introspection defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  'A list of all directives supported by this server.
  """
  directives: [__Directive!]!

  """
  'If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type
}

type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  """
  This field is considered experimental because it has not yet been ratified in the graphql specification
  """
  isOneOf: Boolean

  specifiedByURL: String

  specifiedByUrl: String @deprecated(reason: "This legacy name has been replaced by `specifiedByURL`")
}

"""
An enum describing what kind of type a given __Type is
"""
enum __TypeKind {
  """
  Indicates this type is a scalar. 'specifiedByURL' is a valid field
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks the field, argument, input field or enum value as deprecated
"""
directive @deprecated ("The reason for the deprecation" reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|ENUM_VALUE|INPUT_FIELD_DEFINITION

"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR

"""
Indicates an Input Object is a OneOf Input Object.
"""
directive @oneOf on INPUT_OBJECT

schema {
  query: Query
  mutation: Mutation
}
